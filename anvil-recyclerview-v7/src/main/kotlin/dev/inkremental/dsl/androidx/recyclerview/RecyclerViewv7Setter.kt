@file:Suppress("DEPRECATION", "UNCHECKED_CAST", "MemberVisibilityCanBePrivate", "unused")

package dev.inkremental.dsl.androidx.recyclerview

import android.view.View
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate
import dev.inkremental.Inkremental
import kotlin.Any
import kotlin.Boolean
import kotlin.Function
import kotlin.Int
import kotlin.String
import kotlin.Suppress

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by
 * {@code gradle RecyclerViewv7Setter}
 * It contains views and their setters for the library recyclerview-v7.
 * Please, don't edit it manually unless for debugging.
 */
object RecyclerViewv7Setter : Inkremental.AttributeSetter<Any> {
  override fun set(
    v: View,
    name: String,
    arg: Any?,
    old: Any?
  ): Boolean = when (name) {
    "accessibilityDelegateCompat" -> when {
      v is RecyclerView && arg is RecyclerViewAccessibilityDelegate? -> {
        v.setAccessibilityDelegateCompat(arg)
        true
      }
      else -> false
    }
    "childDrawingOrderCallback" -> when {
      v is RecyclerView && arg is RecyclerView.ChildDrawingOrderCallback? -> {
        v.setChildDrawingOrderCallback(arg)
        true
      }
      else -> false
    }
    "edgeEffectFactory" -> when {
      v is RecyclerView && arg is RecyclerView.EdgeEffectFactory -> {
        v.setEdgeEffectFactory(arg)
        true
      }
      else -> false
    }
    "hasFixedSize" -> when {
      v is RecyclerView && arg is Boolean -> {
        v.setHasFixedSize(arg)
        true
      }
      else -> false
    }
    "itemAnimator" -> when {
      v is RecyclerView && arg is RecyclerView.ItemAnimator? -> {
        v.setItemAnimator(arg)
        true
      }
      else -> false
    }
    "itemViewCacheSize" -> when {
      v is RecyclerView && arg is Int -> {
        v.setItemViewCacheSize(arg)
        true
      }
      else -> false
    }
    "layoutManager" -> when {
      v is RecyclerView && arg is RecyclerView.LayoutManager? -> {
        v.setLayoutManager(arg)
        true
      }
      else -> false
    }
    "onFling" -> when {
      v is RecyclerView -> when {
        arg == null -> {
          v.setOnFlingListener(null as? RecyclerView.OnFlingListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: Int, arg1: Int) -> Boolean)?
          v.setOnFlingListener(object : RecyclerView.OnFlingListener() {
            override fun onFling(arg0: Int, arg1: Int): Boolean = arg(arg0, arg1).also {
                Inkremental.render() }
          })
          true
        }
        else -> false
      }
      else -> false
    }
    "preserveFocusAfterLayout" -> when {
      v is RecyclerView && arg is Boolean -> {
        v.setPreserveFocusAfterLayout(arg)
        true
      }
      else -> false
    }
    "recycledViewPool" -> when {
      v is RecyclerView && arg is RecyclerView.RecycledViewPool? -> {
        v.setRecycledViewPool(arg)
        true
      }
      else -> false
    }
    "recyclerListener" -> when {
      v is RecyclerView && arg is RecyclerView.RecyclerListener? -> {
        v.setRecyclerListener(arg)
        true
      }
      else -> false
    }
    "scrollingTouchSlop" -> when {
      v is RecyclerView && arg is Int -> {
        v.setScrollingTouchSlop(arg)
        true
      }
      else -> false
    }
    "viewCacheExtension" -> when {
      v is RecyclerView && arg is RecyclerView.ViewCacheExtension? -> {
        v.setViewCacheExtension(arg)
        true
      }
      else -> false
    }
    else -> false
  }
}
