package trikita.anvil.appcompat.v7;

import android.content.res.ColorStateList;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import androidx.annotation.Nullable;
import androidx.appcompat.view.menu.ExpandedMenuView;
import androidx.appcompat.view.menu.ListMenuItemView;
import androidx.appcompat.widget.ActionBarContainer;
import androidx.appcompat.widget.ActionBarContextView;
import androidx.appcompat.widget.ActionMenuView;
import androidx.appcompat.widget.ActivityChooserView;
import androidx.appcompat.widget.AlertDialogLayout;
import androidx.appcompat.widget.AppCompatCheckedTextView;
import androidx.appcompat.widget.AppCompatRatingBar;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.appcompat.widget.ButtonBarLayout;
import androidx.appcompat.widget.ContentFrameLayout;
import androidx.appcompat.widget.DialogTitle;
import androidx.appcompat.widget.FitWindowsFrameLayout;
import androidx.appcompat.widget.FitWindowsLinearLayout;
import androidx.appcompat.widget.FitWindowsViewGroup;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.appcompat.widget.ScrollingTabContainerView;
import androidx.appcompat.widget.SearchView;
import androidx.appcompat.widget.SwitchCompat;
import androidx.appcompat.widget.Toolbar;
import androidx.appcompat.widget.ViewStubCompat;
import java.lang.Boolean;
import java.lang.CharSequence;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Void;
import trikita.anvil.Anvil;
import trikita.anvil.BaseDSL;

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by {@code gradle generateAppCompatv7DSL}.
 * It contains views and their setters from the library appcompat-v7.
 * Please, don't edit it manually unless for debugging.
 */
public final class AppCompatv7DSL implements Anvil.AttributeSetter {
  static {
    Anvil.registerAttributeSetter(new AppCompatv7DSL());
  }

  public static BaseDSL.ViewClassResult expandedMenuView() {
    return BaseDSL.v(ExpandedMenuView.class);
  }

  public static Void expandedMenuView(Anvil.Renderable r) {
    return BaseDSL.v(ExpandedMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult listMenuItemView() {
    return BaseDSL.v(ListMenuItemView.class);
  }

  public static Void listMenuItemView(Anvil.Renderable r) {
    return BaseDSL.v(ListMenuItemView.class, r);
  }

  public static BaseDSL.ViewClassResult actionBarContainer() {
    return BaseDSL.v(ActionBarContainer.class);
  }

  public static Void actionBarContainer(Anvil.Renderable r) {
    return BaseDSL.v(ActionBarContainer.class, r);
  }

  public static BaseDSL.ViewClassResult actionBarContextView() {
    return BaseDSL.v(ActionBarContextView.class);
  }

  public static Void actionBarContextView(Anvil.Renderable r) {
    return BaseDSL.v(ActionBarContextView.class, r);
  }

  public static BaseDSL.ViewClassResult actionMenuView() {
    return BaseDSL.v(ActionMenuView.class);
  }

  public static Void actionMenuView(Anvil.Renderable r) {
    return BaseDSL.v(ActionMenuView.class, r);
  }

  public static BaseDSL.ViewClassResult activityChooserView() {
    return BaseDSL.v(ActivityChooserView.class);
  }

  public static Void activityChooserView(Anvil.Renderable r) {
    return BaseDSL.v(ActivityChooserView.class, r);
  }

  public static BaseDSL.ViewClassResult alertDialogLayout() {
    return BaseDSL.v(AlertDialogLayout.class);
  }

  public static Void alertDialogLayout(Anvil.Renderable r) {
    return BaseDSL.v(AlertDialogLayout.class, r);
  }

  public static BaseDSL.ViewClassResult appCompatCheckedTextView() {
    return BaseDSL.v(AppCompatCheckedTextView.class);
  }

  public static Void appCompatCheckedTextView(Anvil.Renderable r) {
    return BaseDSL.v(AppCompatCheckedTextView.class, r);
  }

  public static BaseDSL.ViewClassResult appCompatRatingBar() {
    return BaseDSL.v(AppCompatRatingBar.class);
  }

  public static Void appCompatRatingBar(Anvil.Renderable r) {
    return BaseDSL.v(AppCompatRatingBar.class, r);
  }

  public static BaseDSL.ViewClassResult appCompatSeekBar() {
    return BaseDSL.v(AppCompatSeekBar.class);
  }

  public static Void appCompatSeekBar(Anvil.Renderable r) {
    return BaseDSL.v(AppCompatSeekBar.class, r);
  }

  public static BaseDSL.ViewClassResult buttonBarLayout() {
    return BaseDSL.v(ButtonBarLayout.class);
  }

  public static Void buttonBarLayout(Anvil.Renderable r) {
    return BaseDSL.v(ButtonBarLayout.class, r);
  }

  public static BaseDSL.ViewClassResult contentFrameLayout() {
    return BaseDSL.v(ContentFrameLayout.class);
  }

  public static Void contentFrameLayout(Anvil.Renderable r) {
    return BaseDSL.v(ContentFrameLayout.class, r);
  }

  public static BaseDSL.ViewClassResult dialogTitle() {
    return BaseDSL.v(DialogTitle.class);
  }

  public static Void dialogTitle(Anvil.Renderable r) {
    return BaseDSL.v(DialogTitle.class, r);
  }

  public static BaseDSL.ViewClassResult fitWindowsFrameLayout() {
    return BaseDSL.v(FitWindowsFrameLayout.class);
  }

  public static Void fitWindowsFrameLayout(Anvil.Renderable r) {
    return BaseDSL.v(FitWindowsFrameLayout.class, r);
  }

  public static BaseDSL.ViewClassResult fitWindowsLinearLayout() {
    return BaseDSL.v(FitWindowsLinearLayout.class);
  }

  public static Void fitWindowsLinearLayout(Anvil.Renderable r) {
    return BaseDSL.v(FitWindowsLinearLayout.class, r);
  }

  public static BaseDSL.ViewClassResult linearLayoutCompat() {
    return BaseDSL.v(LinearLayoutCompat.class);
  }

  public static Void linearLayoutCompat(Anvil.Renderable r) {
    return BaseDSL.v(LinearLayoutCompat.class, r);
  }

  public static BaseDSL.ViewClassResult scrollingTabContainerView() {
    return BaseDSL.v(ScrollingTabContainerView.class);
  }

  public static Void scrollingTabContainerView(Anvil.Renderable r) {
    return BaseDSL.v(ScrollingTabContainerView.class, r);
  }

  public static BaseDSL.ViewClassResult searchView() {
    return BaseDSL.v(SearchView.class);
  }

  public static Void searchView(Anvil.Renderable r) {
    return BaseDSL.v(SearchView.class, r);
  }

  public static BaseDSL.ViewClassResult switchCompat() {
    return BaseDSL.v(SwitchCompat.class);
  }

  public static Void switchCompat(Anvil.Renderable r) {
    return BaseDSL.v(SwitchCompat.class, r);
  }

  public static BaseDSL.ViewClassResult toolbar() {
    return BaseDSL.v(Toolbar.class);
  }

  public static Void toolbar(Anvil.Renderable r) {
    return BaseDSL.v(Toolbar.class, r);
  }

  public static BaseDSL.ViewClassResult viewStubCompat() {
    return BaseDSL.v(ViewStubCompat.class);
  }

  public static Void viewStubCompat(Anvil.Renderable r) {
    return BaseDSL.v(ViewStubCompat.class, r);
  }

  public static Void allowStacking(boolean arg) {
    return BaseDSL.attr("allowStacking", arg);
  }

  public static Void attachListener(ContentFrameLayout.OnAttachListener arg) {
    return BaseDSL.attr("attachListener", arg);
  }

  public static Void baselineAligned(boolean arg) {
    return BaseDSL.attr("baselineAligned", arg);
  }

  public static Void baselineAlignedChildIndex(int arg) {
    return BaseDSL.attr("baselineAlignedChildIndex", arg);
  }

  public static Void dividerDrawable(Drawable arg) {
    return BaseDSL.attr("dividerDrawable", arg);
  }

  public static Void dividerPadding(int arg) {
    return BaseDSL.attr("dividerPadding", arg);
  }

  public static Void gravity(int arg) {
    return BaseDSL.attr("gravity", arg);
  }

  public static Void horizontalGravity(int arg) {
    return BaseDSL.attr("horizontalGravity", arg);
  }

  public static Void inflatedId(int arg) {
    return BaseDSL.attr("inflatedId", arg);
  }

  public static Void layoutInflater(LayoutInflater arg) {
    return BaseDSL.attr("layoutInflater", arg);
  }

  public static Void layoutResource(int arg) {
    return BaseDSL.attr("layoutResource", arg);
  }

  public static Void measureWithLargestChildEnabled(boolean arg) {
    return BaseDSL.attr("measureWithLargestChildEnabled", arg);
  }

  public static Void onFitSystemWindows(FitWindowsViewGroup.OnFitSystemWindowsListener arg) {
    return BaseDSL.attr("onFitSystemWindows", arg);
  }

  public static Void onInflate(ViewStubCompat.OnInflateListener arg) {
    return BaseDSL.attr("onInflate", arg);
  }

  public static Void orientation(int arg) {
    return BaseDSL.attr("orientation", arg);
  }

  public static Void primaryBackground(Drawable arg) {
    return BaseDSL.attr("primaryBackground", arg);
  }

  public static Void showDividers(int arg) {
    return BaseDSL.attr("showDividers", arg);
  }

  public static Void showText(boolean arg) {
    return BaseDSL.attr("showText", arg);
  }

  public static Void splitBackground(Drawable arg) {
    return BaseDSL.attr("splitBackground", arg);
  }

  public static Void splitTrack(boolean arg) {
    return BaseDSL.attr("splitTrack", arg);
  }

  public static Void stackedBackground(Drawable arg) {
    return BaseDSL.attr("stackedBackground", arg);
  }

  public static Void switchMinWidth(int arg) {
    return BaseDSL.attr("switchMinWidth", arg);
  }

  public static Void switchPadding(int arg) {
    return BaseDSL.attr("switchPadding", arg);
  }

  public static Void switchTypeface(Typeface arg) {
    return BaseDSL.attr("switchTypeface", arg);
  }

  public static Void tabContainer(ScrollingTabContainerView arg) {
    return BaseDSL.attr("tabContainer", arg);
  }

  public static Void textOff(CharSequence arg) {
    return BaseDSL.attr("textOff", arg);
  }

  public static Void textOn(CharSequence arg) {
    return BaseDSL.attr("textOn", arg);
  }

  public static Void thumbDrawable(Drawable arg) {
    return BaseDSL.attr("thumbDrawable", arg);
  }

  public static Void thumbResource(int arg) {
    return BaseDSL.attr("thumbResource", arg);
  }

  public static Void thumbTextPadding(int arg) {
    return BaseDSL.attr("thumbTextPadding", arg);
  }

  public static Void thumbTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("thumbTintList", arg);
  }

  public static Void thumbTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("thumbTintMode", arg);
  }

  public static Void trackDrawable(Drawable arg) {
    return BaseDSL.attr("trackDrawable", arg);
  }

  public static Void trackResource(int arg) {
    return BaseDSL.attr("trackResource", arg);
  }

  public static Void trackTintList(@Nullable ColorStateList arg) {
    return BaseDSL.attr("trackTintList", arg);
  }

  public static Void trackTintMode(PorterDuff.Mode arg) {
    return BaseDSL.attr("trackTintMode", arg);
  }

  public static Void transitioning(boolean arg) {
    return BaseDSL.attr("transitioning", arg);
  }

  public static Void verticalGravity(int arg) {
    return BaseDSL.attr("verticalGravity", arg);
  }

  public static Void weightSum(float arg) {
    return BaseDSL.attr("weightSum", arg);
  }

  public boolean set(View v, String name, final Object arg, final Object old) {
    switch (name) {
      case "allowStacking":
        if (v instanceof ButtonBarLayout && arg instanceof Boolean) {
          ((ButtonBarLayout) v).setAllowStacking((boolean) arg);
          return true;
        }
        break;
      case "attachListener":
        if (v instanceof ContentFrameLayout && arg instanceof ContentFrameLayout.OnAttachListener) {
          ((ContentFrameLayout) v).setAttachListener((ContentFrameLayout.OnAttachListener) arg);
          return true;
        }
        break;
      case "baselineAligned":
        if (v instanceof LinearLayoutCompat && arg instanceof Boolean) {
          ((LinearLayoutCompat) v).setBaselineAligned((boolean) arg);
          return true;
        }
        break;
      case "baselineAlignedChildIndex":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setBaselineAlignedChildIndex((int) arg);
          return true;
        }
        break;
      case "dividerDrawable":
        if (v instanceof LinearLayoutCompat && arg instanceof Drawable) {
          ((LinearLayoutCompat) v).setDividerDrawable((Drawable) arg);
          return true;
        }
        break;
      case "dividerPadding":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setDividerPadding((int) arg);
          return true;
        }
        break;
      case "gravity":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setGravity((int) arg);
          return true;
        }
        break;
      case "horizontalGravity":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setHorizontalGravity((int) arg);
          return true;
        }
        break;
      case "inflatedId":
        if (v instanceof ViewStubCompat && arg instanceof Integer) {
          ((ViewStubCompat) v).setInflatedId((int) arg);
          return true;
        }
        break;
      case "layoutInflater":
        if (v instanceof ViewStubCompat && arg instanceof LayoutInflater) {
          ((ViewStubCompat) v).setLayoutInflater((LayoutInflater) arg);
          return true;
        }
        break;
      case "layoutResource":
        if (v instanceof ViewStubCompat && arg instanceof Integer) {
          ((ViewStubCompat) v).setLayoutResource((int) arg);
          return true;
        }
        break;
      case "measureWithLargestChildEnabled":
        if (v instanceof LinearLayoutCompat && arg instanceof Boolean) {
          ((LinearLayoutCompat) v).setMeasureWithLargestChildEnabled((boolean) arg);
          return true;
        }
        break;
      case "onFitSystemWindows":
        if (v instanceof FitWindowsFrameLayout && arg instanceof FitWindowsViewGroup.OnFitSystemWindowsListener) {
          if (arg != null) {
            ((FitWindowsFrameLayout) v).setOnFitSystemWindowsListener(new FitWindowsViewGroup.OnFitSystemWindowsListener() {
              public void onFitSystemWindows(Rect a0) {
                ((FitWindowsViewGroup.OnFitSystemWindowsListener) arg).onFitSystemWindows(a0);
                Anvil.render();
              }
            });
          } else {
            ((FitWindowsFrameLayout) v).setOnFitSystemWindowsListener((FitWindowsViewGroup.OnFitSystemWindowsListener) null);
          }
          return true;
        }
        if (v instanceof FitWindowsLinearLayout && arg instanceof FitWindowsViewGroup.OnFitSystemWindowsListener) {
          if (arg != null) {
            ((FitWindowsLinearLayout) v).setOnFitSystemWindowsListener(new FitWindowsViewGroup.OnFitSystemWindowsListener() {
              public void onFitSystemWindows(Rect a0) {
                ((FitWindowsViewGroup.OnFitSystemWindowsListener) arg).onFitSystemWindows(a0);
                Anvil.render();
              }
            });
          } else {
            ((FitWindowsLinearLayout) v).setOnFitSystemWindowsListener((FitWindowsViewGroup.OnFitSystemWindowsListener) null);
          }
          return true;
        }
        break;
      case "onInflate":
        if (v instanceof ViewStubCompat && arg instanceof ViewStubCompat.OnInflateListener) {
          if (arg != null) {
            ((ViewStubCompat) v).setOnInflateListener(new ViewStubCompat.OnInflateListener() {
              public void onInflate(ViewStubCompat a0, View a1) {
                ((ViewStubCompat.OnInflateListener) arg).onInflate(a0, a1);
                Anvil.render();
              }
            });
          } else {
            ((ViewStubCompat) v).setOnInflateListener((ViewStubCompat.OnInflateListener) null);
          }
          return true;
        }
        break;
      case "orientation":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setOrientation((int) arg);
          return true;
        }
        break;
      case "primaryBackground":
        if (v instanceof ActionBarContainer && arg instanceof Drawable) {
          ((ActionBarContainer) v).setPrimaryBackground((Drawable) arg);
          return true;
        }
        break;
      case "showDividers":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setShowDividers((int) arg);
          return true;
        }
        break;
      case "showText":
        if (v instanceof SwitchCompat && arg instanceof Boolean) {
          ((SwitchCompat) v).setShowText((boolean) arg);
          return true;
        }
        break;
      case "splitBackground":
        if (v instanceof ActionBarContainer && arg instanceof Drawable) {
          ((ActionBarContainer) v).setSplitBackground((Drawable) arg);
          return true;
        }
        break;
      case "splitTrack":
        if (v instanceof SwitchCompat && arg instanceof Boolean) {
          ((SwitchCompat) v).setSplitTrack((boolean) arg);
          return true;
        }
        break;
      case "stackedBackground":
        if (v instanceof ActionBarContainer && arg instanceof Drawable) {
          ((ActionBarContainer) v).setStackedBackground((Drawable) arg);
          return true;
        }
        break;
      case "switchMinWidth":
        if (v instanceof SwitchCompat && arg instanceof Integer) {
          ((SwitchCompat) v).setSwitchMinWidth((int) arg);
          return true;
        }
        break;
      case "switchPadding":
        if (v instanceof SwitchCompat && arg instanceof Integer) {
          ((SwitchCompat) v).setSwitchPadding((int) arg);
          return true;
        }
        break;
      case "switchTypeface":
        if (v instanceof SwitchCompat && arg instanceof Typeface) {
          ((SwitchCompat) v).setSwitchTypeface((Typeface) arg);
          return true;
        }
        break;
      case "tabContainer":
        if (v instanceof ActionBarContainer && arg instanceof ScrollingTabContainerView) {
          ((ActionBarContainer) v).setTabContainer((ScrollingTabContainerView) arg);
          return true;
        }
        break;
      case "textOff":
        if (v instanceof SwitchCompat && arg instanceof CharSequence) {
          ((SwitchCompat) v).setTextOff((CharSequence) arg);
          return true;
        }
        break;
      case "textOn":
        if (v instanceof SwitchCompat && arg instanceof CharSequence) {
          ((SwitchCompat) v).setTextOn((CharSequence) arg);
          return true;
        }
        break;
      case "thumbDrawable":
        if (v instanceof SwitchCompat && arg instanceof Drawable) {
          ((SwitchCompat) v).setThumbDrawable((Drawable) arg);
          return true;
        }
        break;
      case "thumbResource":
        if (v instanceof SwitchCompat && arg instanceof Integer) {
          ((SwitchCompat) v).setThumbResource((int) arg);
          return true;
        }
        break;
      case "thumbTextPadding":
        if (v instanceof SwitchCompat && arg instanceof Integer) {
          ((SwitchCompat) v).setThumbTextPadding((int) arg);
          return true;
        }
        break;
      case "thumbTintList":
        if (v instanceof SwitchCompat && (arg == null || arg instanceof ColorStateList)) {
          ((SwitchCompat) v).setThumbTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "thumbTintMode":
        if (v instanceof SwitchCompat && (arg == null || arg instanceof PorterDuff.Mode)) {
          ((SwitchCompat) v).setThumbTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "trackDrawable":
        if (v instanceof SwitchCompat && arg instanceof Drawable) {
          ((SwitchCompat) v).setTrackDrawable((Drawable) arg);
          return true;
        }
        break;
      case "trackResource":
        if (v instanceof SwitchCompat && arg instanceof Integer) {
          ((SwitchCompat) v).setTrackResource((int) arg);
          return true;
        }
        break;
      case "trackTintList":
        if (v instanceof SwitchCompat && (arg == null || arg instanceof ColorStateList)) {
          ((SwitchCompat) v).setTrackTintList((ColorStateList) arg);
          return true;
        }
        break;
      case "trackTintMode":
        if (v instanceof SwitchCompat && (arg == null || arg instanceof PorterDuff.Mode)) {
          ((SwitchCompat) v).setTrackTintMode((PorterDuff.Mode) arg);
          return true;
        }
        break;
      case "transitioning":
        if (v instanceof ActionBarContainer && arg instanceof Boolean) {
          ((ActionBarContainer) v).setTransitioning((boolean) arg);
          return true;
        }
        break;
      case "verticalGravity":
        if (v instanceof LinearLayoutCompat && arg instanceof Integer) {
          ((LinearLayoutCompat) v).setVerticalGravity((int) arg);
          return true;
        }
        break;
      case "weightSum":
        if (v instanceof LinearLayoutCompat && arg instanceof Float) {
          ((LinearLayoutCompat) v).setWeightSum((float) arg);
          return true;
        }
        break;
    }
    return false;
  }
}
