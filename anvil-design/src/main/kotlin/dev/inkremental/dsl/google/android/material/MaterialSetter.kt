@file:Suppress("DEPRECATION", "UNCHECKED_CAST", "MemberVisibilityCanBePrivate", "unused")

package dev.inkremental.dsl.google.android.material

import android.content.res.ColorStateList
import android.graphics.PorterDuff
import android.graphics.Typeface
import android.graphics.drawable.Drawable
import android.view.MenuItem
import android.view.View
import com.google.android.material.animation.MotionSpec
import com.google.android.material.appbar.AppBarLayout
import com.google.android.material.appbar.CollapsingToolbarLayout
import com.google.android.material.bottomappbar.BottomAppBar
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.android.material.button.MaterialButton
import com.google.android.material.card.MaterialCardView
import com.google.android.material.chip.Chip
import com.google.android.material.chip.ChipDrawable
import com.google.android.material.chip.ChipGroup
import com.google.android.material.circularreveal.CircularRevealFrameLayout
import com.google.android.material.circularreveal.CircularRevealGridLayout
import com.google.android.material.circularreveal.CircularRevealLinearLayout
import com.google.android.material.circularreveal.CircularRevealRelativeLayout
import com.google.android.material.circularreveal.CircularRevealWidget
import com.google.android.material.circularreveal.cardview.CircularRevealCardView
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.google.android.material.internal.FlowLayout
import com.google.android.material.internal.NavigationMenuItemView
import com.google.android.material.navigation.NavigationView
import com.google.android.material.resources.TextAppearance
import com.google.android.material.tabs.TabLayout
import com.google.android.material.textfield.TextInputLayout
import kotlin.Any
import kotlin.Boolean
import kotlin.CharSequence
import kotlin.Float
import kotlin.Function
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import trikita.anvil.Anvil

/**
 * DSL for creating views and settings their attributes.
 * This file has been generated by
 * {@code gradle MaterialSetter}
 * It contains views and their setters for the library material.
 * Please, don't edit it manually unless for debugging.
 */
object MaterialSetter : Anvil.AttributeSetter<Any?> {
  override fun set(
    v: View,
    name: String,
    arg: Any?,
    old: Any?
  ): Boolean = when (name) {
    "expanded" -> when {
      v is AppBarLayout && arg is Boolean -> {
        v.setExpanded(arg)
        true
      }
      v is FloatingActionButton && arg is Boolean -> {
        v.setExpanded(arg)
        true
      }
      else -> false
    }
    "liftOnScroll" -> when {
      v is AppBarLayout && arg is Boolean -> {
        v.setLiftOnScroll(arg)
        true
      }
      else -> false
    }
    "liftable" -> when {
      v is AppBarLayout && arg is Boolean -> {
        v.setLiftable(arg)
        true
      }
      else -> false
    }
    "lifted" -> when {
      v is AppBarLayout && arg is Boolean -> {
        v.setLifted(arg)
        true
      }
      else -> false
    }
    "collapsedTitleGravity" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setCollapsedTitleGravity(arg)
        true
      }
      else -> false
    }
    "collapsedTitleTextAppearance" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setCollapsedTitleTextAppearance(arg)
        true
      }
      else -> false
    }
    "collapsedTitleTextColor" -> when {
      v is CollapsingToolbarLayout && arg is ColorStateList -> {
        v.setCollapsedTitleTextColor(arg)
        true
      }
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setCollapsedTitleTextColor(arg)
        true
      }
      else -> false
    }
    "collapsedTitleTypeface" -> when {
      v is CollapsingToolbarLayout && arg is Typeface? -> {
        v.setCollapsedTitleTypeface(arg as Typeface)
        true
      }
      else -> false
    }
    "contentScrim" -> when {
      v is CollapsingToolbarLayout && arg is Drawable? -> {
        v.setContentScrim(arg as Drawable)
        true
      }
      else -> false
    }
    "contentScrimColor" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setContentScrimColor(arg)
        true
      }
      else -> false
    }
    "contentScrimResource" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setContentScrimResource(arg)
        true
      }
      else -> false
    }
    "expandedTitleColor" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleColor(arg)
        true
      }
      else -> false
    }
    "expandedTitleGravity" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleGravity(arg)
        true
      }
      else -> false
    }
    "expandedTitleMarginBottom" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleMarginBottom(arg)
        true
      }
      else -> false
    }
    "expandedTitleMarginEnd" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleMarginEnd(arg)
        true
      }
      else -> false
    }
    "expandedTitleMarginStart" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleMarginStart(arg)
        true
      }
      else -> false
    }
    "expandedTitleMarginTop" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleMarginTop(arg)
        true
      }
      else -> false
    }
    "expandedTitleTextAppearance" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setExpandedTitleTextAppearance(arg)
        true
      }
      else -> false
    }
    "expandedTitleTextColor" -> when {
      v is CollapsingToolbarLayout && arg is ColorStateList -> {
        v.setExpandedTitleTextColor(arg)
        true
      }
      else -> false
    }
    "expandedTitleTypeface" -> when {
      v is CollapsingToolbarLayout && arg is Typeface? -> {
        v.setExpandedTitleTypeface(arg as Typeface)
        true
      }
      else -> false
    }
    "scrimAnimationDuration" -> when {
      v is CollapsingToolbarLayout && arg is Long -> {
        v.setScrimAnimationDuration(arg)
        true
      }
      else -> false
    }
    "scrimVisibleHeightTrigger" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setScrimVisibleHeightTrigger(arg)
        true
      }
      else -> false
    }
    "scrimsShown" -> when {
      v is CollapsingToolbarLayout && arg is Boolean -> {
        v.setScrimsShown(arg)
        true
      }
      else -> false
    }
    "statusBarScrim" -> when {
      v is CollapsingToolbarLayout && arg is Drawable? -> {
        v.setStatusBarScrim(arg as Drawable)
        true
      }
      else -> false
    }
    "statusBarScrimColor" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setStatusBarScrimColor(arg)
        true
      }
      else -> false
    }
    "statusBarScrimResource" -> when {
      v is CollapsingToolbarLayout && arg is Int -> {
        v.setStatusBarScrimResource(arg)
        true
      }
      else -> false
    }
    "title" -> when {
      v is CollapsingToolbarLayout && arg is CharSequence? -> {
        v.setTitle(arg as CharSequence)
        true
      }
      else -> false
    }
    "titleEnabled" -> when {
      v is CollapsingToolbarLayout && arg is Boolean -> {
        v.setTitleEnabled(arg)
        true
      }
      else -> false
    }
    "backgroundTint" -> when {
      v is BottomAppBar && arg is ColorStateList? -> {
        v.setBackgroundTint(arg as ColorStateList)
        true
      }
      else -> false
    }
    "cradleVerticalOffset" -> when {
      v is BottomAppBar && arg is Float -> {
        v.setCradleVerticalOffset(arg)
        true
      }
      else -> false
    }
    "fabAlignmentMode" -> when {
      v is BottomAppBar && arg is Int -> {
        v.setFabAlignmentMode(arg)
        true
      }
      else -> false
    }
    "fabCradleMargin" -> when {
      v is BottomAppBar && arg is Float -> {
        v.setFabCradleMargin(arg)
        true
      }
      else -> false
    }
    "fabCradleRoundedCornerRadius" -> when {
      v is BottomAppBar && arg is Float -> {
        v.setFabCradleRoundedCornerRadius(arg)
        true
      }
      else -> false
    }
    "hideOnScroll" -> when {
      v is BottomAppBar && arg is Boolean -> {
        v.setHideOnScroll(arg)
        true
      }
      else -> false
    }
    "itemBackground" -> when {
      v is BottomNavigationView && arg is Drawable? -> {
        v.setItemBackground(arg as Drawable)
        true
      }
      v is NavigationView && arg is Drawable? -> {
        v.setItemBackground(arg as Drawable)
        true
      }
      else -> false
    }
    "itemBackgroundResource" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setItemBackgroundResource(arg)
        true
      }
      v is NavigationView && arg is Int -> {
        v.setItemBackgroundResource(arg)
        true
      }
      else -> false
    }
    "itemHorizontalTranslationEnabled" -> when {
      v is BottomNavigationView && arg is Boolean -> {
        v.setItemHorizontalTranslationEnabled(arg)
        true
      }
      else -> false
    }
    "itemIconSize" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setItemIconSize(arg)
        true
      }
      else -> false
    }
    "itemIconSizeRes" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setItemIconSizeRes(arg)
        true
      }
      else -> false
    }
    "itemIconTintList" -> when {
      v is BottomNavigationView && arg is ColorStateList? -> {
        v.setItemIconTintList(arg as ColorStateList)
        true
      }
      v is NavigationView && arg is ColorStateList? -> {
        v.setItemIconTintList(arg as ColorStateList)
        true
      }
      else -> false
    }
    "itemTextAppearanceActive" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setItemTextAppearanceActive(arg)
        true
      }
      else -> false
    }
    "itemTextAppearanceInactive" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setItemTextAppearanceInactive(arg)
        true
      }
      else -> false
    }
    "itemTextColor" -> when {
      v is BottomNavigationView && arg is ColorStateList? -> {
        v.setItemTextColor(arg as ColorStateList)
        true
      }
      v is NavigationView && arg is ColorStateList? -> {
        v.setItemTextColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "labelVisibilityMode" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setLabelVisibilityMode(arg)
        true
      }
      else -> false
    }
    "onNavigationItemReselected" -> when {
      v is BottomNavigationView -> when {
        arg == null -> {
          v.setOnNavigationItemReselectedListener(null as?
              BottomNavigationView.OnNavigationItemReselectedListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: MenuItem) -> Unit)?
          v.setOnNavigationItemReselectedListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "onNavigationItemSelected" -> when {
      v is BottomNavigationView -> when {
        arg == null -> {
          v.setOnNavigationItemSelectedListener(null as?
              BottomNavigationView.OnNavigationItemSelectedListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: MenuItem) -> Boolean)?
          v.setOnNavigationItemSelectedListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "selectedItemId" -> when {
      v is BottomNavigationView && arg is Int -> {
        v.setSelectedItemId(arg)
        true
      }
      else -> false
    }
    "cornerRadius" -> when {
      v is MaterialButton && arg is Int -> {
        v.setCornerRadius(arg)
        true
      }
      else -> false
    }
    "cornerRadiusResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setCornerRadiusResource(arg)
        true
      }
      else -> false
    }
    "icon" -> when {
      v is MaterialButton && arg is Drawable -> {
        v.setIcon(arg)
        true
      }
      else -> false
    }
    "iconGravity" -> when {
      v is MaterialButton && arg is Int -> {
        v.setIconGravity(arg)
        true
      }
      else -> false
    }
    "iconPadding" -> when {
      v is MaterialButton && arg is Int -> {
        v.setIconPadding(arg)
        true
      }
      else -> false
    }
    "iconResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setIconResource(arg)
        true
      }
      else -> false
    }
    "iconSize" -> when {
      v is MaterialButton && arg is Int -> {
        v.setIconSize(arg)
        true
      }
      else -> false
    }
    "iconTint" -> when {
      v is MaterialButton && arg is ColorStateList? -> {
        v.setIconTint(arg as ColorStateList)
        true
      }
      else -> false
    }
    "iconTintMode" -> when {
      v is MaterialButton && arg is PorterDuff.Mode -> {
        v.setIconTintMode(arg)
        true
      }
      else -> false
    }
    "iconTintResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setIconTintResource(arg)
        true
      }
      else -> false
    }
    "rippleColor" -> when {
      v is MaterialButton && arg is ColorStateList? -> {
        v.setRippleColor(arg as ColorStateList)
        true
      }
      v is Chip && arg is ColorStateList? -> {
        v.setRippleColor(arg as ColorStateList)
        true
      }
      v is FloatingActionButton && arg is ColorStateList? -> {
        v.setRippleColor(arg as ColorStateList)
        true
      }
      v is FloatingActionButton && arg is Int -> {
        v.setRippleColor(arg)
        true
      }
      else -> false
    }
    "rippleColorResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setRippleColorResource(arg)
        true
      }
      v is Chip && arg is Int -> {
        v.setRippleColorResource(arg)
        true
      }
      else -> false
    }
    "strokeColor" -> when {
      v is MaterialButton && arg is ColorStateList? -> {
        v.setStrokeColor(arg as ColorStateList)
        true
      }
      v is MaterialCardView && arg is Int -> {
        v.setStrokeColor(arg)
        true
      }
      else -> false
    }
    "strokeColorResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setStrokeColorResource(arg)
        true
      }
      else -> false
    }
    "strokeWidth" -> when {
      v is MaterialButton && arg is Int -> {
        v.setStrokeWidth(arg)
        true
      }
      v is MaterialCardView && arg is Int -> {
        v.setStrokeWidth(arg)
        true
      }
      else -> false
    }
    "strokeWidthResource" -> when {
      v is MaterialButton && arg is Int -> {
        v.setStrokeWidthResource(arg)
        true
      }
      else -> false
    }
    "checkable" -> when {
      v is Chip && arg is Boolean -> {
        v.setCheckable(arg)
        true
      }
      else -> false
    }
    "checkableResource" -> when {
      v is Chip && arg is Int -> {
        v.setCheckableResource(arg)
        true
      }
      else -> false
    }
    "checkedIcon" -> when {
      v is Chip && arg is Drawable? -> {
        v.setCheckedIcon(arg as Drawable)
        true
      }
      else -> false
    }
    "checkedIconResource" -> when {
      v is Chip && arg is Int -> {
        v.setCheckedIconResource(arg)
        true
      }
      else -> false
    }
    "checkedIconVisible" -> when {
      v is Chip && arg is Boolean -> {
        v.setCheckedIconVisible(arg)
        true
      }
      v is Chip && arg is Int -> {
        v.setCheckedIconVisible(arg)
        true
      }
      else -> false
    }
    "chipBackgroundColor" -> when {
      v is Chip && arg is ColorStateList? -> {
        v.setChipBackgroundColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "chipBackgroundColorResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipBackgroundColorResource(arg)
        true
      }
      else -> false
    }
    "chipCornerRadius" -> when {
      v is Chip && arg is Float -> {
        v.setChipCornerRadius(arg)
        true
      }
      else -> false
    }
    "chipCornerRadiusResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipCornerRadiusResource(arg)
        true
      }
      else -> false
    }
    "chipDrawable" -> when {
      v is Chip && arg is ChipDrawable -> {
        v.setChipDrawable(arg)
        true
      }
      else -> false
    }
    "chipEndPadding" -> when {
      v is Chip && arg is Float -> {
        v.setChipEndPadding(arg)
        true
      }
      else -> false
    }
    "chipEndPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipEndPaddingResource(arg)
        true
      }
      else -> false
    }
    "chipIcon" -> when {
      v is Chip && arg is Drawable? -> {
        v.setChipIcon(arg as Drawable)
        true
      }
      else -> false
    }
    "chipIconResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipIconResource(arg)
        true
      }
      else -> false
    }
    "chipIconSize" -> when {
      v is Chip && arg is Float -> {
        v.setChipIconSize(arg)
        true
      }
      else -> false
    }
    "chipIconSizeResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipIconSizeResource(arg)
        true
      }
      else -> false
    }
    "chipIconTint" -> when {
      v is Chip && arg is ColorStateList? -> {
        v.setChipIconTint(arg as ColorStateList)
        true
      }
      else -> false
    }
    "chipIconTintResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipIconTintResource(arg)
        true
      }
      else -> false
    }
    "chipIconVisible" -> when {
      v is Chip && arg is Boolean -> {
        v.setChipIconVisible(arg)
        true
      }
      v is Chip && arg is Int -> {
        v.setChipIconVisible(arg)
        true
      }
      else -> false
    }
    "chipMinHeight" -> when {
      v is Chip && arg is Float -> {
        v.setChipMinHeight(arg)
        true
      }
      else -> false
    }
    "chipMinHeightResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipMinHeightResource(arg)
        true
      }
      else -> false
    }
    "chipStartPadding" -> when {
      v is Chip && arg is Float -> {
        v.setChipStartPadding(arg)
        true
      }
      else -> false
    }
    "chipStartPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipStartPaddingResource(arg)
        true
      }
      else -> false
    }
    "chipStrokeColor" -> when {
      v is Chip && arg is ColorStateList? -> {
        v.setChipStrokeColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "chipStrokeColorResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipStrokeColorResource(arg)
        true
      }
      else -> false
    }
    "chipStrokeWidth" -> when {
      v is Chip && arg is Float -> {
        v.setChipStrokeWidth(arg)
        true
      }
      else -> false
    }
    "chipStrokeWidthResource" -> when {
      v is Chip && arg is Int -> {
        v.setChipStrokeWidthResource(arg)
        true
      }
      else -> false
    }
    "closeIcon" -> when {
      v is Chip && arg is Drawable? -> {
        v.setCloseIcon(arg as Drawable)
        true
      }
      else -> false
    }
    "closeIconContentDescription" -> when {
      v is Chip && arg is CharSequence? -> {
        v.setCloseIconContentDescription(arg as CharSequence)
        true
      }
      else -> false
    }
    "closeIconEndPadding" -> when {
      v is Chip && arg is Float -> {
        v.setCloseIconEndPadding(arg)
        true
      }
      else -> false
    }
    "closeIconEndPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setCloseIconEndPaddingResource(arg)
        true
      }
      else -> false
    }
    "closeIconResource" -> when {
      v is Chip && arg is Int -> {
        v.setCloseIconResource(arg)
        true
      }
      else -> false
    }
    "closeIconSize" -> when {
      v is Chip && arg is Float -> {
        v.setCloseIconSize(arg)
        true
      }
      else -> false
    }
    "closeIconSizeResource" -> when {
      v is Chip && arg is Int -> {
        v.setCloseIconSizeResource(arg)
        true
      }
      else -> false
    }
    "closeIconStartPadding" -> when {
      v is Chip && arg is Float -> {
        v.setCloseIconStartPadding(arg)
        true
      }
      else -> false
    }
    "closeIconStartPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setCloseIconStartPaddingResource(arg)
        true
      }
      else -> false
    }
    "closeIconTint" -> when {
      v is Chip && arg is ColorStateList? -> {
        v.setCloseIconTint(arg as ColorStateList)
        true
      }
      else -> false
    }
    "closeIconTintResource" -> when {
      v is Chip && arg is Int -> {
        v.setCloseIconTintResource(arg)
        true
      }
      else -> false
    }
    "closeIconVisible" -> when {
      v is Chip && arg is Boolean -> {
        v.setCloseIconVisible(arg)
        true
      }
      v is Chip && arg is Int -> {
        v.setCloseIconVisible(arg)
        true
      }
      else -> false
    }
    "hideMotionSpec" -> when {
      v is Chip && arg is MotionSpec? -> {
        v.setHideMotionSpec(arg as MotionSpec)
        true
      }
      v is FloatingActionButton && arg is MotionSpec -> {
        v.setHideMotionSpec(arg)
        true
      }
      else -> false
    }
    "hideMotionSpecResource" -> when {
      v is Chip && arg is Int -> {
        v.setHideMotionSpecResource(arg)
        true
      }
      v is FloatingActionButton && arg is Int -> {
        v.setHideMotionSpecResource(arg)
        true
      }
      else -> false
    }
    "iconEndPadding" -> when {
      v is Chip && arg is Float -> {
        v.setIconEndPadding(arg)
        true
      }
      else -> false
    }
    "iconEndPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setIconEndPaddingResource(arg)
        true
      }
      else -> false
    }
    "iconStartPadding" -> when {
      v is Chip && arg is Float -> {
        v.setIconStartPadding(arg)
        true
      }
      else -> false
    }
    "iconStartPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setIconStartPaddingResource(arg)
        true
      }
      else -> false
    }
    "onCloseIconClick" -> when {
      v is Chip -> when {
        arg == null -> {
          v.setOnCloseIconClickListener(null as? View.OnClickListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: View) -> Unit)?
          v.setOnCloseIconClickListener { arg0 ->
            arg(arg0).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "showMotionSpec" -> when {
      v is Chip && arg is MotionSpec? -> {
        v.setShowMotionSpec(arg as MotionSpec)
        true
      }
      v is FloatingActionButton && arg is MotionSpec -> {
        v.setShowMotionSpec(arg)
        true
      }
      else -> false
    }
    "showMotionSpecResource" -> when {
      v is Chip && arg is Int -> {
        v.setShowMotionSpecResource(arg)
        true
      }
      v is FloatingActionButton && arg is Int -> {
        v.setShowMotionSpecResource(arg)
        true
      }
      else -> false
    }
    "textAppearance" -> when {
      v is Chip && arg is TextAppearance? -> {
        v.setTextAppearance(arg as TextAppearance)
        true
      }
      v is NavigationMenuItemView && arg is Int -> {
        v.setTextAppearance(arg)
        true
      }
      else -> false
    }
    "textAppearanceResource" -> when {
      v is Chip && arg is Int -> {
        v.setTextAppearanceResource(arg)
        true
      }
      else -> false
    }
    "textEndPadding" -> when {
      v is Chip && arg is Float -> {
        v.setTextEndPadding(arg)
        true
      }
      else -> false
    }
    "textEndPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setTextEndPaddingResource(arg)
        true
      }
      else -> false
    }
    "textStartPadding" -> when {
      v is Chip && arg is Float -> {
        v.setTextStartPadding(arg)
        true
      }
      else -> false
    }
    "textStartPaddingResource" -> when {
      v is Chip && arg is Int -> {
        v.setTextStartPaddingResource(arg)
        true
      }
      else -> false
    }
    "chipSpacing" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacing(arg)
        true
      }
      else -> false
    }
    "chipSpacingHorizontal" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacingHorizontal(arg)
        true
      }
      else -> false
    }
    "chipSpacingHorizontalResource" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacingHorizontalResource(arg)
        true
      }
      else -> false
    }
    "chipSpacingResource" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacingResource(arg)
        true
      }
      else -> false
    }
    "chipSpacingVertical" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacingVertical(arg)
        true
      }
      else -> false
    }
    "chipSpacingVerticalResource" -> when {
      v is ChipGroup && arg is Int -> {
        v.setChipSpacingVerticalResource(arg)
        true
      }
      else -> false
    }
    "onCheckedChange" -> when {
      v is ChipGroup -> when {
        arg == null -> {
          v.setOnCheckedChangeListener(null as? ChipGroup.OnCheckedChangeListener?)
          true
        }
        arg is Function<*> -> {
          arg as ((arg0: ChipGroup, arg1: Int) -> Unit)?
          v.setOnCheckedChangeListener { arg0, arg1 ->
            arg(arg0, arg1).also { Anvil.render() }
          }
          true
        }
        else -> false
      }
      else -> false
    }
    "singleLine" -> when {
      v is FlowLayout && arg is Boolean -> {
        v.setSingleLine(arg)
        true
      }
      v is ChipGroup && arg is Int -> {
        v.setSingleLine(arg)
        true
      }
      else -> false
    }
    "singleSelection" -> when {
      v is ChipGroup && arg is Boolean -> {
        v.setSingleSelection(arg)
        true
      }
      v is ChipGroup && arg is Int -> {
        v.setSingleSelection(arg)
        true
      }
      else -> false
    }
    "circularRevealOverlayDrawable" -> when {
      v is CircularRevealFrameLayout && arg is Drawable? -> {
        v.setCircularRevealOverlayDrawable(arg as Drawable)
        true
      }
      v is CircularRevealGridLayout && arg is Drawable? -> {
        v.setCircularRevealOverlayDrawable(arg as Drawable)
        true
      }
      v is CircularRevealLinearLayout && arg is Drawable? -> {
        v.setCircularRevealOverlayDrawable(arg as Drawable)
        true
      }
      v is CircularRevealRelativeLayout && arg is Drawable? -> {
        v.setCircularRevealOverlayDrawable(arg as Drawable)
        true
      }
      v is CircularRevealCardView && arg is Drawable? -> {
        v.setCircularRevealOverlayDrawable(arg as Drawable)
        true
      }
      else -> false
    }
    "circularRevealScrimColor" -> when {
      v is CircularRevealFrameLayout && arg is Int -> {
        v.setCircularRevealScrimColor(arg)
        true
      }
      v is CircularRevealGridLayout && arg is Int -> {
        v.setCircularRevealScrimColor(arg)
        true
      }
      v is CircularRevealLinearLayout && arg is Int -> {
        v.setCircularRevealScrimColor(arg)
        true
      }
      v is CircularRevealRelativeLayout && arg is Int -> {
        v.setCircularRevealScrimColor(arg)
        true
      }
      v is CircularRevealCardView && arg is Int -> {
        v.setCircularRevealScrimColor(arg)
        true
      }
      else -> false
    }
    "revealInfo" -> when {
      v is CircularRevealFrameLayout && arg is CircularRevealWidget.RevealInfo? -> {
        v.setRevealInfo(arg as CircularRevealWidget.RevealInfo)
        true
      }
      v is CircularRevealGridLayout && arg is CircularRevealWidget.RevealInfo? -> {
        v.setRevealInfo(arg as CircularRevealWidget.RevealInfo)
        true
      }
      v is CircularRevealLinearLayout && arg is CircularRevealWidget.RevealInfo? -> {
        v.setRevealInfo(arg as CircularRevealWidget.RevealInfo)
        true
      }
      v is CircularRevealRelativeLayout && arg is CircularRevealWidget.RevealInfo? -> {
        v.setRevealInfo(arg as CircularRevealWidget.RevealInfo)
        true
      }
      v is CircularRevealCardView && arg is CircularRevealWidget.RevealInfo? -> {
        v.setRevealInfo(arg as CircularRevealWidget.RevealInfo)
        true
      }
      else -> false
    }
    "compatElevation" -> when {
      v is FloatingActionButton && arg is Float -> {
        v.setCompatElevation(arg)
        true
      }
      else -> false
    }
    "compatElevationResource" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setCompatElevationResource(arg)
        true
      }
      else -> false
    }
    "compatHoveredFocusedTranslationZ" -> when {
      v is FloatingActionButton && arg is Float -> {
        v.setCompatHoveredFocusedTranslationZ(arg)
        true
      }
      else -> false
    }
    "compatHoveredFocusedTranslationZResource" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setCompatHoveredFocusedTranslationZResource(arg)
        true
      }
      else -> false
    }
    "compatPressedTranslationZ" -> when {
      v is FloatingActionButton && arg is Float -> {
        v.setCompatPressedTranslationZ(arg)
        true
      }
      else -> false
    }
    "compatPressedTranslationZResource" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setCompatPressedTranslationZResource(arg)
        true
      }
      else -> false
    }
    "customSize" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setCustomSize(arg)
        true
      }
      else -> false
    }
    "expandedComponentIdHint" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setExpandedComponentIdHint(arg)
        true
      }
      else -> false
    }
    "size" -> when {
      v is FloatingActionButton && arg is Int -> {
        v.setSize(arg)
        true
      }
      else -> false
    }
    "supportBackgroundTintList" -> when {
      v is FloatingActionButton && arg is ColorStateList? -> {
        v.setSupportBackgroundTintList(arg as ColorStateList)
        true
      }
      else -> false
    }
    "supportBackgroundTintMode" -> when {
      v is FloatingActionButton && arg is PorterDuff.Mode? -> {
        v.setSupportBackgroundTintMode(arg as PorterDuff.Mode)
        true
      }
      else -> false
    }
    "supportImageTintList" -> when {
      v is FloatingActionButton && arg is ColorStateList? -> {
        v.setSupportImageTintList(arg as ColorStateList)
        true
      }
      else -> false
    }
    "supportImageTintMode" -> when {
      v is FloatingActionButton && arg is PorterDuff.Mode? -> {
        v.setSupportImageTintMode(arg as PorterDuff.Mode)
        true
      }
      else -> false
    }
    "useCompatPadding" -> when {
      v is FloatingActionButton && arg is Boolean -> {
        v.setUseCompatPadding(arg)
        true
      }
      else -> false
    }
    "horizontalPadding" -> when {
      v is NavigationMenuItemView && arg is Int -> {
        v.setHorizontalPadding(arg)
        true
      }
      else -> false
    }
    "needsEmptyIcon" -> when {
      v is NavigationMenuItemView && arg is Boolean -> {
        v.setNeedsEmptyIcon(arg)
        true
      }
      else -> false
    }
    "checkedItem" -> when {
      v is NavigationView && arg is MenuItem -> {
        v.setCheckedItem(arg)
        true
      }
      v is NavigationView && arg is Int -> {
        v.setCheckedItem(arg)
        true
      }
      else -> false
    }
    "itemHorizontalPadding" -> when {
      v is NavigationView && arg is Int -> {
        v.setItemHorizontalPadding(arg)
        true
      }
      else -> false
    }
    "itemHorizontalPaddingResource" -> when {
      v is NavigationView && arg is Int -> {
        v.setItemHorizontalPaddingResource(arg)
        true
      }
      else -> false
    }
    "itemIconPadding" -> when {
      v is NavigationView && arg is Int -> {
        v.setItemIconPadding(arg)
        true
      }
      else -> false
    }
    "itemIconPaddingResource" -> when {
      v is NavigationView && arg is Int -> {
        v.setItemIconPaddingResource(arg)
        true
      }
      else -> false
    }
    "itemTextAppearance" -> when {
      v is NavigationView && arg is Int -> {
        v.setItemTextAppearance(arg)
        true
      }
      else -> false
    }
    "navigationItemSelectedListener" -> when {
      v is NavigationView && arg is NavigationView.OnNavigationItemSelectedListener? -> {
        v.setNavigationItemSelectedListener(arg as NavigationView.OnNavigationItemSelectedListener)
        true
      }
      else -> false
    }
    "inlineLabel" -> when {
      v is TabLayout && arg is Boolean -> {
        v.setInlineLabel(arg)
        true
      }
      else -> false
    }
    "inlineLabelResource" -> when {
      v is TabLayout && arg is Int -> {
        v.setInlineLabelResource(arg)
        true
      }
      else -> false
    }
    "selectedTabIndicator" -> when {
      v is TabLayout && arg is Drawable? -> {
        v.setSelectedTabIndicator(arg as Drawable)
        true
      }
      v is TabLayout && arg is Int -> {
        v.setSelectedTabIndicator(arg)
        true
      }
      else -> false
    }
    "selectedTabIndicatorColor" -> when {
      v is TabLayout && arg is Int -> {
        v.setSelectedTabIndicatorColor(arg)
        true
      }
      else -> false
    }
    "selectedTabIndicatorGravity" -> when {
      v is TabLayout && arg is Int -> {
        v.setSelectedTabIndicatorGravity(arg)
        true
      }
      else -> false
    }
    "tabGravity" -> when {
      v is TabLayout && arg is Int -> {
        v.setTabGravity(arg)
        true
      }
      else -> false
    }
    "tabIconTint" -> when {
      v is TabLayout && arg is ColorStateList? -> {
        v.setTabIconTint(arg as ColorStateList)
        true
      }
      else -> false
    }
    "tabIconTintResource" -> when {
      v is TabLayout && arg is Int -> {
        v.setTabIconTintResource(arg)
        true
      }
      else -> false
    }
    "tabIndicatorFullWidth" -> when {
      v is TabLayout && arg is Boolean -> {
        v.setTabIndicatorFullWidth(arg)
        true
      }
      else -> false
    }
    "tabMode" -> when {
      v is TabLayout && arg is Int -> {
        v.setTabMode(arg)
        true
      }
      else -> false
    }
    "tabRippleColor" -> when {
      v is TabLayout && arg is ColorStateList -> {
        v.setTabRippleColor(arg)
        true
      }
      else -> false
    }
    "tabRippleColorResource" -> when {
      v is TabLayout && arg is Int -> {
        v.setTabRippleColorResource(arg)
        true
      }
      else -> false
    }
    "tabTextColors" -> when {
      v is TabLayout && arg is ColorStateList? -> {
        v.setTabTextColors(arg as ColorStateList)
        true
      }
      else -> false
    }
    "unboundedRipple" -> when {
      v is TabLayout && arg is Boolean -> {
        v.setUnboundedRipple(arg)
        true
      }
      else -> false
    }
    "unboundedRippleResource" -> when {
      v is TabLayout && arg is Int -> {
        v.setUnboundedRippleResource(arg)
        true
      }
      else -> false
    }
    "boxBackgroundColor" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setBoxBackgroundColor(arg)
        true
      }
      else -> false
    }
    "boxBackgroundColorResource" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setBoxBackgroundColorResource(arg)
        true
      }
      else -> false
    }
    "boxBackgroundMode" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setBoxBackgroundMode(arg)
        true
      }
      else -> false
    }
    "boxStrokeColor" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setBoxStrokeColor(arg)
        true
      }
      else -> false
    }
    "counterEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setCounterEnabled(arg)
        true
      }
      else -> false
    }
    "counterMaxLength" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setCounterMaxLength(arg)
        true
      }
      else -> false
    }
    "defaultHintTextColor" -> when {
      v is TextInputLayout && arg is ColorStateList? -> {
        v.setDefaultHintTextColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "error" -> when {
      v is TextInputLayout && arg is CharSequence? -> {
        v.setError(arg as CharSequence)
        true
      }
      else -> false
    }
    "errorEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setErrorEnabled(arg)
        true
      }
      else -> false
    }
    "errorTextAppearance" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setErrorTextAppearance(arg)
        true
      }
      else -> false
    }
    "errorTextColor" -> when {
      v is TextInputLayout && arg is ColorStateList? -> {
        v.setErrorTextColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "helperText" -> when {
      v is TextInputLayout && arg is CharSequence? -> {
        v.setHelperText(arg as CharSequence)
        true
      }
      else -> false
    }
    "helperTextColor" -> when {
      v is TextInputLayout && arg is ColorStateList? -> {
        v.setHelperTextColor(arg as ColorStateList)
        true
      }
      else -> false
    }
    "helperTextEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setHelperTextEnabled(arg)
        true
      }
      else -> false
    }
    "helperTextTextAppearance" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setHelperTextTextAppearance(arg)
        true
      }
      else -> false
    }
    "hint" -> when {
      v is TextInputLayout && arg is CharSequence? -> {
        v.setHint(arg as CharSequence)
        true
      }
      else -> false
    }
    "hintAnimationEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setHintAnimationEnabled(arg)
        true
      }
      else -> false
    }
    "hintEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setHintEnabled(arg)
        true
      }
      else -> false
    }
    "hintTextAppearance" -> when {
      v is TextInputLayout && arg is Int -> {
        v.setHintTextAppearance(arg)
        true
      }
      else -> false
    }
    "passwordVisibilityToggleContentDescription" -> when {
      v is TextInputLayout && arg is CharSequence? -> {
        v.setPasswordVisibilityToggleContentDescription(arg as CharSequence)
        true
      }
      v is TextInputLayout && arg is Int -> {
        v.setPasswordVisibilityToggleContentDescription(arg)
        true
      }
      else -> false
    }
    "passwordVisibilityToggleDrawable" -> when {
      v is TextInputLayout && arg is Drawable? -> {
        v.setPasswordVisibilityToggleDrawable(arg as Drawable)
        true
      }
      v is TextInputLayout && arg is Int -> {
        v.setPasswordVisibilityToggleDrawable(arg)
        true
      }
      else -> false
    }
    "passwordVisibilityToggleEnabled" -> when {
      v is TextInputLayout && arg is Boolean -> {
        v.setPasswordVisibilityToggleEnabled(arg)
        true
      }
      else -> false
    }
    "passwordVisibilityToggleTintList" -> when {
      v is TextInputLayout && arg is ColorStateList? -> {
        v.setPasswordVisibilityToggleTintList(arg as ColorStateList)
        true
      }
      else -> false
    }
    "passwordVisibilityToggleTintMode" -> when {
      v is TextInputLayout && arg is PorterDuff.Mode? -> {
        v.setPasswordVisibilityToggleTintMode(arg as PorterDuff.Mode)
        true
      }
      else -> false
    }
    "textInputAccessibilityDelegate" -> when {
      v is TextInputLayout && arg is TextInputLayout.AccessibilityDelegate -> {
        v.setTextInputAccessibilityDelegate(arg)
        true
      }
      else -> false
    }
    "typeface" -> when {
      v is TextInputLayout && arg is Typeface? -> {
        v.setTypeface(arg as Typeface)
        true
      }
      else -> false
    }
    else -> false
  }
}
